@page "/profile"

@using EnoLandingPageFrontend.Services
@using EnoLandingPageCore.Messages
@using EnoLandingPageCore.Database

@inject LandingPageDataApiService dataService
@inject NavigationManager navManager

<div class="container p-3">
    @if (teamInformation != null && ctfInfo != null)
    {
        <h1>@(teamInformation.TeamName)</h1>
        if (!teamInformation.Confirmed)
        {
            if (DateTime.UtcNow > ctfInfo.StartTime.AddHours(-ctfInfo.CheckInEndOffset).ToUniversalTime()) // CheckIn is over
            {
                <div class="alert alert-danger" role="alert">
                    You did not confirm your participation before @(ctfInfo.StartTime.AddHours(-ctfInfo.CheckInEndOffset).ToUniversalTime().ToString()) UTC.
                </div>
            }
            else if (ctfInfo.StartTime.AddHours(-ctfInfo.CheckInBeginOffset).ToUniversalTime() > DateTime.UtcNow) // CheckIn has not started
            {
                <div class="alert alert-danger" role="alert">
                    Your participation hasn't been confirmed yet! Please check in after @(ctfInfo.StartTime.AddHours(-ctfInfo.CheckInBeginOffset).ToUniversalTime().ToString()) UTC.
                </div>
                <button @onclick="CheckIn" disabled=disabled>Check In!</button>
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    Your participation hasn't been confirmed yet! Please check in before @(ctfInfo.StartTime.AddHours(-ctfInfo.CheckInEndOffset).ToUniversalTime().ToString()) UTC.
                </div>
                <button @onclick="CheckIn">Check In!</button>
            }
        }
        else
        {
            <div class="alert alert-success" role="alert">
                Your participation has been confirmed!
            </div>
            if (ctfInfo.StartTime < DateTime.UtcNow)
            {
                if (teamInformation.VulnboxStatus == LandingPageVulnboxStatus.None)
                {
                    <button @onclick="StartVm">Create VM</button>
                }
                else if (teamInformation.VulnboxStatus == LandingPageVulnboxStatus.Creating)
                {
                    <p>Your VM is starting!</p>
                }
                else if (teamInformation.VulnboxStatus == LandingPageVulnboxStatus.Created)
                {
                    <button @onclick="ResetVm">Reboot VM</button>
                }
                else
                {
                    <div class="alert alert-danger" role="alert">
                        We fucked up. Please contact us.
                    </div>
                }
            }

            if (vmInteractionFeedback != null)
            {
                <p>@vmInteractionFeedback</p>
            }
        }
        <div>
            <div>External IP Address:</div>
            <code>@(teamInformation.ExternalIpAddress ?? "coming soon")</code>
        </div>
        <div>
            <div>Root Password:</div>
            <code>@(teamInformation.RootPassword ?? "coming soon")</code>
        </div>
        <div>
            <div>Internal IP Address:</div>
            <code>@(teamInformation.InternalIpAddress ?? "coming soon")</code>
        </div>
        <div>
            <div>Vulnbox Status:</div>
            <code>@teamInformation.VulnboxStatus</code>
        </div>
        <div>
            <div>Vpn Configuration:</div>
            @if (teamInformation.VpnConfigAvailable)
            {
                <a href="/api/account/vpnconfig">Download</a>
            }
            else
            {
                <code>coming soon</code>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter]
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    private TeamDetailsMessage? teamInformation;
    private CtfInfoMessage? ctfInfo;
    private string? vmInteractionFeedback;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = navManager.ToBaseRelativePath(navManager.Uri);
            navManager.NavigateTo($"login?returnUrl=/{navManager.ToBaseRelativePath(navManager.Uri)}", false);
            return; // yep this is necessary.
        }

        teamInformation = await dataService.GetTeamInfo();
        ctfInfo = await dataService.GetCtfInfo();
    }

    protected async Task CheckIn(MouseEventArgs e)
    {
        await dataService.CheckIn();
        teamInformation = await dataService.GetTeamInfo();
    }

    protected async Task StartVm(MouseEventArgs e)
    {
        vmInteractionFeedback = null;
        try
        {
            await dataService.StartVm();
        }
        catch (Exception ex)
        {
            vmInteractionFeedback = ex.GetType().ToString();
        }

        teamInformation = await dataService.GetTeamInfo();
    }

    protected async Task ResetVm(MouseEventArgs e)
    {
        vmInteractionFeedback = null;
        try
        {
            await dataService.ResetVm();
        }
        catch (Exception ex)
        {
            vmInteractionFeedback = ex.GetType().ToString();
        }

        teamInformation = await dataService.GetTeamInfo();
    }
}
