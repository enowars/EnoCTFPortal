@page "/scoreboard/team/{selectedTeamId:long}"

@using EnoCore.Models.Scoreboard
@using Microsoft.Extensions.Logging
@using EnoCore
@using EnoLandingPageFrontend.Services
@using System.Security.Claims
@using System.Globalization

@inject LandingPageScoreboardApiService ScoreboardService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger<ScoreboardTeamView> logger

@if (Model != null)
{
    var orderedServices = Model.Services.OrderBy(t => t.ServiceId).ToArray();
    <table class="scoreboard">
        <colgroup>
            <col class="team-rank" style="width:40px;" />
            <col class="team-name" style="width:15%;" />
            <col class="team-score" style="width:80px;" />
            @foreach (var service in orderedServices)
            {
                <col style="width: 1fr;" />
            }
        </colgroup>
        <thead>
            <tr>
                <td colspan="3">
                    <div class="roundcontrol">
                    </div>
                </td>
                @foreach (var service in orderedServices)
                {
                    <td>@service.ServiceName</td>
                }
            </tr>
        </thead>
        @foreach (var round in Scoreboards)
        {
            (var rank, var team) = GetTeam(selectedTeamId, round);
            var orderedServiceDetails = team.ServiceDetails.OrderBy(t => t.ServiceId).ToList();
            <tr>
                <td class="team-rank">@rank</td>
                <td>
                    <div class="team-container">
                        Round @(round.CurrentRound)
                    </div>
                </td>
                <td class="team-score">@(team.TotalScore.ToString("0.00", CultureInfo.InvariantCulture))</td>

                @for (int s = 0; s < team.ServiceDetails.Length; s++)
                {
                    var serviceDetails = orderedServiceDetails[s];
                    <td class="p-2 service-@(Enum.GetName(serviceDetails.ServiceStatus))" eno-service-id="@(serviceDetails.ServiceId)">
                        @if (serviceDetails.Message != null)
                        {
                            <div class="errormessage">@serviceDetails.Message</div>
                        }
                        <div class="service-stats">
                            <i class="scoreboard-icon fas fa-meteor" />
                            <div class="scoreboard-text">@(serviceDetails.AttackScore.ToString("+0.00;-0.00", CultureInfo.InvariantCulture))</div>
                            <div class="scoreboard-text"></div>

                            <i class="scoreboard-icon fas fa-shield-alt" />
                            <div class="scoreboard-text">@(serviceDetails.DefenseScore.ToString("+0.00;-0.00", CultureInfo.InvariantCulture))</div>
                            <div class="scoreboard-text"></div>

                            <i class="scoreboard-icon fas fa-heartbeat" />
                            <div class="scoreboard-text">@(serviceDetails.ServiceLevelAgreementScore.ToString("+0.00;-0.00", CultureInfo.InvariantCulture))</div>
                            <div class="scoreboard-text"></div>
                        </div>
                    </td>
                }
            </tr>
        }
    </table>
}
else
{
    <div>No scoreboard data yet</div>
}


@code {
    [Parameter]
    public long selectedTeamId { get; set; }
    private LinkedList<Scoreboard> Scoreboards { get; set; } = new LinkedList<Scoreboard>(); // first=current, last=0
    private Scoreboard? Model { get; set; }

    protected override Task OnInitializedAsync()
    {
        ScoreboardService.NewScoreboardEvent += HandleNewScoreboardEvent;
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSet {Model}");
        Model = ScoreboardService.LatestScoreboard;
        Scoreboards.Clear();
        if (ScoreboardService.LatestScoreboard != null)
        {
            Scoreboards.AddFirst(ScoreboardService.LatestScoreboard);
            await LoadMore(ScoreboardService.LatestScoreboard.CurrentRound);
        }
    }

    public void Dispose()
    {
        ScoreboardService.NewScoreboardEvent -= HandleNewScoreboardEvent;
    }

    private async Task LoadMore(long topRoundId)
    {
        logger.LogInformation($"LoadMore {topRoundId}");
        var tasks = new Task<Scoreboard?>?[20];
        for (int i = 0; i < tasks.Length; i++)
        {
            long roundId = topRoundId - i;
            if (roundId >= 0)
            {
                tasks[i] = ScoreboardService.TryGetOrRequest(roundId);
            }
        }
        for (int i = 0; i < tasks.Length; i++)
        {
            var task = tasks[i];
            if (task != null)
            {
                var sb = await task;
                if (sb != null && Scoreboards.Last().CurrentRound == sb.CurrentRound + 1)
                {
                    Scoreboards.AddLast(sb);
                }
            }
        }
    }

    private async void HandleNewScoreboardEvent(Scoreboard newScoreboard)
    {
        logger.LogInformation($"HandleNewScoreboardEvent round {newScoreboard.CurrentRound}");
        Model = newScoreboard;
        if (Scoreboards.Count == 0 || Scoreboards.First().CurrentRound + 1 == newScoreboard.CurrentRound)
        {
            Scoreboards.AddFirst(newScoreboard);
            StateHasChanged();
            await LoadMore(newScoreboard.CurrentRound);
            StateHasChanged();
        }
        else
        {
            // TODO restore correct state
        }
    }

    private (long rank, ScoreboardTeam) GetTeam(long teamId, Scoreboard scoreboard)
    {
        long rank = 0;
        foreach (var team in scoreboard.Teams)
        {
            rank += 1;
            if (team.TeamId == teamId)
            {
                return (rank, team);
            }
        }
        throw new InvalidOperationException();
    }
}
