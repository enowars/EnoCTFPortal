@page "/scoreboard"
@page "/scoreboard/round/{selectedRoundId:long}"

@using EnoCore.Models.Scoreboard
@using Microsoft.Extensions.Logging
@using EnoCore
@using EnoLandingPageFrontend.Services
@using System.Security.Claims
@using System.Globalization

@inject LandingPageScoreboardApiService ScoreboardService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger<ScoreboardView> logger

@functions {
    private bool showAdvancedScoreboard = false;

     private void ToggleAdvancedScoreboard()
    {
        showAdvancedScoreboard = !showAdvancedScoreboard;
    }

    private string HslToHex(double h, double s, double l)
    {
        // Normalize h, s, l
        l /= 100.0;
        s /= 100.0;

        // Edge case where saturation is 0 (gray)
        if (s == 0)
        {
            int gray = (int)Math.Round(l * 255.0);
            return $"#{gray:X2}{gray:X2}{gray:X2}";
        }

        double a = s * Math.Min(l, 1 - l);
        int ToHex(double value)
        {
            // Clamp value to the range 0-255 and convert to an integer
            int clampedValue = (int)Math.Round(Math.Max(0.0, Math.Min(255.0, value)));
            return clampedValue;
        }

        double f(int n)
        {
            double k = (n + h / 30.0) % 12.0;
            double color = l - a * Math.Max(Math.Min(k - 3.0, 9.0 - k), -1.0);
            return 255.0 * color;
        }

        // Convert to 2-digit hex values
        string ToHexString(int value) => value.ToString("X2");

        // Ensure HEX color is properly formatted
        return $"#{ToHexString(ToHex(f(0)))}{ToHexString(ToHex(f(8)))}{ToHexString(ToHex(f(4)))}";
    }

    private double Clamp(double value, double min, double max)
    {
        return Math.Max(min, Math.Min(max, value));
    }
}



@if (currentScoreboard != null)
{
    var orderedTeams = currentScoreboard.Teams.OrderByDescending(t => t.TotalScore).ToArray();
    var orderedServices = currentScoreboard.Services.OrderBy(t => t.ServiceId).ToArray();

    @if (showAdvancedScoreboard)
    {
        // Advanced Scoreboard Calculation
        var states = new[] { "OK", "RECOVERING", "MUMBLE", "OFFLINE", "INTERNAL_ERROR", "EXPLOITED" };
        var serviceNames = orderedServices.Select(s => s.ServiceName).ToArray();
        var advancedScoreboardData = new double[orderedServices.Length, states.Length];

        @for (int t = 0; t < currentScoreboard.Teams.Length; t++)
        {
            var team = orderedTeams[t];
            var orderedTeamServiceDetails = team.ServiceDetails.OrderBy(sd => sd.ServiceId).ToArray();
            @for (int s = 0; s < team.ServiceDetails.Length; s++)
            {
                var serviceDetails = orderedTeamServiceDetails[s];
                var service = orderedServices[s];
                var state = serviceDetails.ServiceStatus;
                var stateName = Enum.GetName(state);
                var dataStateIndex = Array.IndexOf(states, stateName);
                advancedScoreboardData[s, dataStateIndex] += 1.0;

                // check if team exploited this service
                if (serviceDetails.AttackScore > 0)
                {
                    advancedScoreboardData[s, 5] += 1.0;
                }
            }
        }


        // Advanced Scoreboard display
        <table class="adv-scoreboard">
            <tr class="adv-scoreboard-header">
                <th class="adv-scoreboard-header-cell">Service</th>
                @foreach (var state in states)
                {
                    <th class="adv-scoreboard-header-cell">@state</th>
                }
            </tr>
            @for (int s = 0; s < orderedServices.Length; s++)
            {
                var service = orderedServices[s];
                <tr class="adv-scoreboard-row">
                    <td class="adv-scoreboard-row-cell">@service.ServiceName</td>
                    @for (int stateIndex = 0; stateIndex < states.Length; stateIndex++)
                    {
                        var value = advancedScoreboardData[s, stateIndex];
                        var proportion = value / currentScoreboard.Teams.Length * 100;
                        var brightness = 100 - (proportion / 2 + 10);
                        var saturation = proportion * 0.5 + 50;
                        var hue = stateIndex switch
                        {
                            0 => 110, // OK
                            1 => 210, // RECOVERING
                            2 => 40,  // MUMBLE
                            3 => 0,   // OFFLINE
                            4 => 240, // INTERNAL_ERROR
                            5 => 300, // EXPLOITED
                            _ => 0
                        };
                        var bgColor = HslToHex(hue, saturation, brightness);
                        <td class="adv-scoreboard-row-cell" style="background-color: @bgColor;">
                            @value
                        </td>
                    }
                </tr>
            }
        </table>


    }

    // Normal Scoreboard
    <table class="scoreboard">
        <colgroup>
            <col class="team-rank" style="width:40px;" />
            <col class="team-name" style="width:15%;" />
            <col class="team-score" style="width:80px;" />
            @foreach (var service in orderedServices)
            {
                <col style="width: 1fr;" />
            }
        </colgroup>
        <thead>
            <tr>
                <td colspan="3">
                    <div class="roundcontrol">
                        <div>
                            <a class="fabutton" href="/scoreboard/round/0"><i class="p-2 fas fa-angle-double-left" /></a>
                            @if (currentScoreboard.CurrentRound > 0)
                            {
                                <a class="fabutton" href="/scoreboard/round/@(currentScoreboard.CurrentRound - 1)"><i class="p-2 fas fa-angle-left" /></a>
                            }
                            else
                            {
                                <i class="p-2 fas fa-angle-left" />
                            }
                        </div>
                        <div class="p-1" @onclick="ToggleAdvancedScoreboard">Round @currentScoreboard.CurrentRound</div>
                        <div>
                            @if (currentScoreboard.CurrentRound < ScoreboardService.LatestScoreboard?.CurrentRound)
                            {
                                <a class="fabutton" href="/scoreboard/round/@(currentScoreboard.CurrentRound + 1)"><i class="p-2 fas fa-angle-right" /></a>
                            }
                            else
                            {
                                <i class="p-2 fas fa-angle-right" />
                            }
                            <a class="fabutton" href="/scoreboard"><i class="p-2 fas fa-angle-double-right" /></a>
                        </div>
                    </div>
                </td>
                @foreach (var service in orderedServices)
                {
                    <td>@service.ServiceName</td>
                }
            </tr>
        </thead>
        <tr>
            <td colspan="3" />
            @foreach (var service in orderedServices)
            {
                <td class="p-2 firstblood-list-cell">
                    @for (int i = 0; i < service.FlagVariants; i++)
                    {
                        ScoreboardFirstBlood? fb = service.FirstBloods.Where(fb => fb.FlagVariantId == i).SingleOrDefault();
                        if (fb != null)
                        {
                            <div class="firstblood-list"><i class="scoreboard-icon blood fas fa-tint" />@orderedTeams.Where(t => t.TeamId == fb.TeamId).Single().TeamName</div>
                        }
                        else
                        {
                            <div class="firstblood-list"><i class="scoreboard-icon fas fa-tint" />Flagstore #@(i+1) unexploited</div>
                        }
                    }
                </td>
            }
        </tr>
        @for (int t = 0; t < currentScoreboard.Teams.Length; t++)
        {
            var team = orderedTeams[t];
            string? countryUrl = null;
            if (team.CountryCode != null && team.CountryCode != string.Empty)
            {
                countryUrl = $"https://cdn.ipregistry.co/flags/wikimedia/{team.CountryCode?.ToLower()}.png";
            }
            var orderedTeamServiceDetails = team.ServiceDetails.OrderBy(sd => sd.ServiceId).ToArray();
            var previousRoundTeam = previousScoreboard?.Teams.Where(t => t.TeamId == team.TeamId).Single();
            <tr class="@(team.TeamId == ownId ? "ownrow" : "otherrow")">
                <td class="team-rank">@(t+1)</td>
                <td>
                    <div class="team-container">
                        <div class="team-logo-container">
                            <img src="@team.LogoUrl" class="team-logo" referrerpolicy="no-referrer" />
                        </div>
                        <div class="team-name"><a href="/scoreboard/team/@team.TeamId">@team.TeamName</a></div>
                        <img src="@countryUrl" class="team-countryflag" referrerpolicy="no-referrer" />
                    </div>
                </td>
                @if (previousRoundTeam != null)
                {
                    double totalDiff = team.TotalScore - previousRoundTeam.TotalScore;
                    <td class="team-score">@(team.TotalScore.ToString("0.00", CultureInfo.InvariantCulture)) (@(totalDiff.ToString("+0.00;-0.00", CultureInfo.InvariantCulture)))</td>
                }
                else
                {
                    <td class="team-score">@(team.TotalScore.ToString("+0.00;-0.00", CultureInfo.InvariantCulture))</td>
                }

                @for (int s = 0; s < team.ServiceDetails.Length; s++)
                {
                    var serviceDetails = orderedTeamServiceDetails[s];
                    @if (previousRoundTeam == null)
                    {
                        <td class="p-2 service-@(Enum.GetName(serviceDetails.ServiceStatus))">
                            @if (serviceDetails.Message != null)
                            {
                                <div class="errormessage">@serviceDetails.Message</div>
                            }
                            <div class="service-stats">
                                <i class="scoreboard-icon fas fa-meteor" />
                                <div class="scoreboard-text">@(serviceDetails.AttackScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text"></div>

                                <i class="scoreboard-icon fas fa-shield-alt" />
                                <div class="scoreboard-text">@(serviceDetails.DefenseScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text"></div>

                                <i class="scoreboard-icon fas fa-heartbeat" />
                                <div class="scoreboard-text">@(serviceDetails.ServiceLevelAgreementScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text"></div>
                            </div>
                        </td>
                    }
                    else
                    {
                        var orderedOldServices = previousRoundTeam.ServiceDetails.OrderBy(s => s.ServiceId).ToArray();
                        double slaDiff = (serviceDetails.ServiceLevelAgreementScore - orderedOldServices[s].ServiceLevelAgreementScore);
                        double attackDiff = (serviceDetails.AttackScore - orderedOldServices[s].AttackScore);
                        double defenseDiff = (serviceDetails.DefenseScore - orderedOldServices[s].DefenseScore);
                        <td class="p-2 service-block service-@(Enum.GetName(serviceDetails.ServiceStatus))">
                            @if (serviceDetails.Message != null)
                            {
                                <div class="errormessage p-1">@serviceDetails.Message</div>
                            }
                            <div class="service-stats">
                                <i class="scoreboard-icon fas fa-meteor" />
                                <div class="scoreboard-text">@(serviceDetails.AttackScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text">(@(attackDiff.ToString("+0.00;-0.00", CultureInfo.InvariantCulture)))</div>


                                <i class="scoreboard-icon fas fa-shield-alt" />
                                <div class="scoreboard-text">@(serviceDetails.DefenseScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text">(@(defenseDiff.ToString("+0.00;-0.00", CultureInfo.InvariantCulture)))</div>


                                <i class="scoreboard-icon fas fa-heartbeat" />
                                <div class="scoreboard-text">@(serviceDetails.ServiceLevelAgreementScore.ToString("0.00", CultureInfo.InvariantCulture))</div>
                                <div class="scoreboard-text">(@(slaDiff.ToString("+0.00;-0.00", CultureInfo.InvariantCulture)))</div>
                            </div>
                        </td>
                    }
                }
            </tr>
        }
    </table>
}


@code {
    [Parameter]
    public long? selectedRoundId { get; set; }
    private Scoreboard? previousScoreboard;
    private Scoreboard? currentScoreboard;
    private long? ownId;

    protected override Task OnInitializedAsync()
    {
        ScoreboardService.NewScoreboardEvent += HandleNewScoreboardEvent;
        var t = HandleAuthProvider();
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (selectedRoundId is long roundId)
        {
            // We are in "show old round" mode.
            currentScoreboard = await ScoreboardService.TryGetOrRequest(roundId);
            previousScoreboard = await ScoreboardService.TryGetOrRequest(roundId - 1);
        }
        else
        {
            // We are in "show current round" mode.
            currentScoreboard = ScoreboardService.LatestScoreboard;
            if (currentScoreboard?.CurrentRound > 1)
            {
                previousScoreboard = await ScoreboardService.TryGetOrRequest(currentScoreboard.CurrentRound - 1);
            }
        }
    }

    public void Dispose()
    {
        ScoreboardService.NewScoreboardEvent -= HandleNewScoreboardEvent;
    }

    private async Task HandleAuthProvider()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var ni = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (long.TryParse(ni, out var teamId))
        {
            ownId = teamId;
            StateHasChanged();
        }
    }

    private void HandleOldScoreboardEvent(Scoreboard oldScoreboard)
    {
        logger.LogInformation($"HandleOldScoreboardEvent round {oldScoreboard.CurrentRound}");
        if (selectedRoundId is long roundId)
        {
            // We are in "show old round" mode.
            if (oldScoreboard.CurrentRound == roundId)
            {
                currentScoreboard = oldScoreboard;
            }
            if (oldScoreboard.CurrentRound == roundId - 1)
            {
                previousScoreboard = oldScoreboard;
            }
        }
        else
        {
            // We are in "show current round" mode.
            if (oldScoreboard.CurrentRound == currentScoreboard?.CurrentRound - 1)
            {
                previousScoreboard = oldScoreboard;
            }
        }
        StateHasChanged();
    }

    private async void HandleNewScoreboardEvent(Scoreboard newScoreboard)
    {
        logger.LogInformation($"HandleNewScoreboardEvent round {newScoreboard.CurrentRound}");
        if (selectedRoundId == null) // We are in "show current round" mode.
        {
            if (newScoreboard.CurrentRound > currentScoreboard?.CurrentRound)
            {
                // A new round has finished.
                previousScoreboard = await ScoreboardService.TryGetOrRequest(newScoreboard.CurrentRound - 1);
                currentScoreboard = newScoreboard;
            }
            else
            {
                // The CTF was restarted or we just started
                previousScoreboard = null;
                currentScoreboard = newScoreboard;
                previousScoreboard = await ScoreboardService.TryGetOrRequest(newScoreboard.CurrentRound - 1);
            }
            StateHasChanged();
        }
    }
}
